<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="DPLC" Id="{e1cd1fb6-a555-428a-ad55-be92dc17179d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION DPLC : REAL
VAR_INPUT
	Pellet_Length_Inch_Input :REAL;
	Speed_Input: REAL;	//The speed input must be a percentage.

	RotorMot_Rated_RPM : REAL;
	RotorMot_Rated_Hz: REAL;
	RotorMot_Max_Hz : REAL;
	RotorMot_Min_Hz : REAL;

	Rotor_Drive_Pulley: REAL;
	Rotor_Driven_Pulley: REAL;
	Rotor_Tooth_Count: REAL;
	Rotor_RPM_Limit: REAL;
	
	FeedrollMot_Rated_RPM: REAL;
	FeedrollMot_Rated_Hz: REAL;
	FeedrollMot_Max_Hz : REAL;
	FeedrollMot_Min_Hz : REAL;
	Actual_FeedrollMot_Speed_RPM : INT;

	Feedroll_Drive_Pulley: REAL;
	Feedroll_Driven_Pulley: REAL;
	Feedroll_Diameter_Inch: REAL;
	

	Metric_Set_Bit : BOOL;

END_VAR

VAR
	FeedrollMot_Speed_Hz : REAL;
	FeedrollMot_Speed_RPM : REAL;
	FeedrollMot_RPM_Per_Hz : REAL;

	Feedroll_Pulley_Ratio: REAL;
	Feedroll_Speed_RPM: REAL;
	Feedroll_Circumference_Inch :REAL;

	RotorMot_Speed_Hz : REAL;
	RotorMot_Speed_RPM : REAL;
	RotorMot_RPM_Per_Hz : REAL;

	Rotor_Pulley_Ratio: REAL;
	Cuts_Per_Minute: REAL;
	
	Min_Cuts_Per_Minute : REAL;
	Max_Cuts_Per_Minute : REAL;
	
	FeedRate_Inches_Per_Minute: REAL;
END_VAR

VAR_OUTPUT
	Pellet_Length_Output :REAL; 		//this is the resulting pellet length for display. Converted to Metric or Imperial depending on the Metric Set Bit.

	Feedroll_Motor_Speed_Hz_int : INT;	//this variable is written to the drive. Ms: Velocity Mode (-2) uses Hz to control speed.
	Rotor_Motor_Speed_Hz_int : INT;  	//this variable is written to the drive. Ms: Velocity Mode (-2) uses Hz to control speed.
	
	Rotor_Speed_RPM: REAL;
	
	FeedRate_Feet_Per_Minute: REAL;		//This is the displayed Ft/min on the HMI
	
	Rotor_RPM_Minimum : REAL; // info for Gauge on HMI
	Maximum_Line_Speed : REAL;	//info for machine limits
	Minimum_Line_Speed: REAL;	//info for machine limits
	Maximum_Pellet_Length : REAL;	//info for machine limits
	Minimum_Pellet_Length : REAL;	//info for machine limits
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[////////////////////////////Notes and Information/////////////////////////////////////////////////////////////////////////////////////////////////////
//         The feedroll Must be the master for the DPLC calculations
//         The reason for this is so that the line speed can be set BEFORE the pellet length is determined
//         When actively changing the pellet length while running, the rotor speed can change but the feedrate must be maintained.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//If the Metric Bit is set, we convert the pellet length in mm to inches for input. We also convert to output Feedroll speed to meters per minute

//if direction is backwards, make it a postive number.
IF Actual_feedrollMot_Speed_RPM < 0 THEN
	Actual_feedrollMot_Speed_RPM := Actual_feedrollMot_Speed_RPM * -1;
END_IF
	


////////////////////////////////////Setup Calculations
FeedrollMot_RPM_Per_Hz := FeedrollMot_Rated_RPM / FeedrollMot_Rated_Hz;
Feedroll_Pulley_Ratio := Feedroll_Drive_Pulley / Feedroll_Driven_Pulley;
Feedroll_Circumference_Inch := Feedroll_Diameter_Inch *  3.14159;

RotorMot_RPM_Per_Hz := RotorMot_Rated_RPM / RotorMot_Rated_Hz;	
Rotor_Pulley_Ratio := Rotor_Drive_Pulley / Rotor_Driven_pulley;


/////////////////////////////////////Feedroll Calculations
FeedrollMot_Speed_Hz := FeedrollMot_Max_Hz * Speed_Input;
FeedrollMot_Speed_RPM := INT_TO_REAL(Actual_FeedrollMot_Speed_RPM);	// Read the Feedroll RPM Back and do calculation on the actual.
Feedroll_Speed_RPM := FeedrollMot_Speed_RPM * Feedroll_Pulley_Ratio;
FeedRate_Inches_Per_Minute := Feedroll_Speed_RPM * Feedroll_Circumference_Inch;
FeedRate_Feet_Per_Minute := FeedRate_Inches_Per_Minute / 12 ;


/////////////////////////////////////Rotor Calculations
Cuts_Per_Minute := FeedRate_Inches_Per_Minute / (Pellet_Length_Inch_Input * GVL.Pellet_Length_Calibration_Value);
Rotor_Speed_RPM := Cuts_Per_Minute / Rotor_Tooth_Count;	//the ROTOR needs to go this many RPM to achieve the pellet length
RotorMot_Speed_RPM := Rotor_Speed_RPM / Rotor_Pulley_Ratio;
RotorMot_Speed_Hz := RotorMot_Speed_RPM / RotorMot_RPM_Per_Hz;


////////////////////////////////////Set and Convert Speeds to send to Drive
Feedroll_Motor_Speed_Hz_int := REAL_TO_INT(FeedrollMot_Speed_Hz * 10);
Rotor_Motor_Speed_Hz_int := REAL_TO_INT(RotorMot_Speed_Hz * 10);


///////////////////////////////////Limits
Maximum_Line_Speed := (Feedroll_Circumference_Inch / 12) * ((FeedrollMot_Max_Hz * FeedrollMot_RPM_Per_Hz) * Feedroll_Pulley_Ratio);
Minimum_Line_Speed := (Feedroll_Circumference_Inch / 12) * ((FeedrollMot_Min_Hz * FeedrollMot_RPM_Per_Hz) * Feedroll_Pulley_Ratio);

Rotor_RPM_Minimum := RotorMot_RPM_Per_Hz * RotorMot_Min_Hz;

Min_Cuts_Per_Minute := Rotor_Tooth_Count * ((RotorMot_RPM_Per_Hz * RotorMot_Min_Hz) * Rotor_Pulley_Ratio);
Max_Cuts_Per_Minute := Rotor_Tooth_Count * ((RotorMot_RPM_Per_Hz * RotorMot_Max_Hz) * Rotor_Pulley_Ratio);

Maximum_Pellet_Length := (Maximum_Line_Speed * 12) / Min_Cuts_Per_Minute;
Minimum_Pellet_Length := (Minimum_Line_Speed * 12) / Max_Cuts_Per_Minute;


IF Metric_Set_Bit THEN
	//Convert feedroll speed to meters per min for display.
	Feedrate_Feet_Per_Minute := Feedrate_Feet_Per_Minute * 0.3048;
	Maximum_Line_Speed := Maximum_Line_Speed * 0.3048;
	Minimum_Line_Speed := Minimum_Line_Speed * 0.3048;
	
	//Convert min and max pellet length to mm so the input box does not error.
	Maximum_Pellet_Length := Maximum_Pellet_Length * 25.4;
	Minimum_Pellet_Length := Minimum_Pellet_Length * 25.4;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="DPLC">
      <LineId Id="1177" Count="54" />
      <LineId Id="1233" Count="10" />
    </LineIds>
  </POU>
</TcPlcObject>